AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  KWAK

  Tests for candidates and HR

Globals:
  Function:
    Timeout: 20

Resources:
  KwakApi:
    Type: AWS::Serverless::Api
    Properties:
      Auth:
        AddDefaultAuthorizerToCorsPreflight: False
        DefaultAuthorizer: AWS_IAM
        InvokeRole: CALLER_CREDENTIALS
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      StageName: dev
      GatewayResponses:
        BAD_REQUEST_BODY:
          StatusCode: 400
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: '{"message": "$context.error.validationErrorString"}'

      DefinitionBody:
        openapi: 3.0.0
        info:
          description: KWAK API
          version: "1.0.0"
          title: KWAK API
          contact:
            email: vesphy@gmail.com
        x-amazon-apigateway-request-validators:
          all:
            validateRequestBody: true
            validateRequestParameters: true
          params-only :
            validateRequestBody: false,
            validateRequestParameters : true
        x-amazon-apigateway-request-validator : all
        paths:
          "/tests/import":
            post:
              x-amazon-apigateway-integration:
                credentials: 'arn:aws:iam::*:user/*'
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ImportTestFunction.Arn}/invocations
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/ImportTest'
              responses:
                '200':
                  description: test imported
          "/tests":
            post:
              x-amazon-apigateway-integration:
                credentials: 'arn:aws:iam::*:user/*'
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddTestFunction.Arn}/invocations
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Test'
              responses:
                '200':
                  description: test created
            get:
              x-amazon-apigateway-integration:
                credentials: 'arn:aws:iam::*:user/*'
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTestsFunction.Arn}/invocations
              responses:
                '200':
                  description: list of all tests
          "/tests/{id}":
            get:
              x-amazon-apigateway-integration:
                credentials: 'arn:aws:iam::*:user/*'
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTestFunction.Arn}/invocations
              parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
                    format: uuid
              responses:
                '200':
                  description: get test
            delete:
              x-amazon-apigateway-integration:
                credentials: 'arn:aws:iam::*:user/*'
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTestFunction.Arn}/invocations
              parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
                    format: uuid
              responses:
                '204':
                  description: delete test
            put:
              x-amazon-apigateway-integration:
                credentials: 'arn:aws:iam::*:user/*'
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateTestFunction.Arn}/invocations
              parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
                    format: uuid
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Test'
              responses:
                '200':
                  description: update test
          "/candidatetests":
            post:
              x-amazon-apigateway-integration:
                credentials: 'arn:aws:iam::*:user/*'
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddAdminCandidateTestFunction.Arn}/invocations
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/CandidateTest'
              responses:
                '200':
                  description: candidate test created
            get:
              x-amazon-apigateway-integration:
                credentials: 'arn:aws:iam::*:user/*'
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllCandidateTestsFunction.Arn}/invocations
              responses:
                '200':
                  description: list of all candidate tests
          "/candidatetests/{id}":
            get:
              x-amazon-apigateway-integration:
                credentials: 'arn:aws:iam::*:user/*'
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAdminCandidateTestFunction.Arn}/invocations
              parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
                    format: uuid
              responses:
                '200':
                  description: get candidate test
            delete:
              x-amazon-apigateway-integration:
                credentials: 'arn:aws:iam::*:user/*'
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteCandidateTestFunction.Arn}/invocations
              parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
                    format: uuid
              responses:
                '204':
                  description: delete test
            put:
              x-amazon-apigateway-integration:
                credentials: 'arn:aws:iam::*:user/*'
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateCandidateTestFunction.Arn}/invocations
              parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
                    format: uuid
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/CandidateTest'
              responses:
                '200':
                  description: update candidate test
          "/candidates":
            post:
              x-amazon-apigateway-integration:
                credentials: 'arn:aws:iam::*:user/*'
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddCandidateFunction.Arn}/invocations
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Candidate'
              responses:
                '200':
                  description: candidate test created
            get:
              x-amazon-apigateway-integration:
                credentials: 'arn:aws:iam::*:user/*'
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCandidatesFunction.Arn}/invocations
              responses:
                '200':
                  description: list of all candidates
          "/candidates/{candidateId}":
            get:
              x-amazon-apigateway-integration:
                credentials: 'arn:aws:iam::*:user/*'
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCandidateFunction.Arn}/invocations
              parameters:
                - in: path
                  name: candidateId
                  required: true
                  schema:
                    type: string
                    format: uuid
              responses:
                '200':
                  description: get candidate
            delete:
              x-amazon-apigateway-integration:
                credentials: 'arn:aws:iam::*:user/*'
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteCandidateFunction.Arn}/invocations
              parameters:
                - in: path
                  name: candidateId
                  required: true
                  schema:
                    type: string
                    format: uuid
              responses:
                '204':
                  description: delete candidate
          "/candidates/{candidateId}/tests":
            get:
              x-amazon-apigateway-integration:
                credentials: 'arn:aws:iam::*:user/*'
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCandidateTestsFunction.Arn}/invocations
              parameters:
                - in: path
                  name: candidateId
                  required: true
                  schema:
                    type: string
                    format: uuid
              responses:
                '200':
                  description: get candidate tests
          "/upload":
            post:
              x-amazon-apigateway-integration:
                credentials: 'arn:aws:iam::*:user/*'
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GeneratePresignedURLFunction.Arn}/invocations
              responses:
                '200':
                  description: generated key and url
        components:
          schemas:
            Candidate:
              type: object
              required:
                - email
                - name
                - surname
              properties:
                id:
                  type: string
                  minLength: 5
                  maxLength: 100
                name:
                  type: string
                  minLength: 5
                  maxLength: 100
                surname:
                  type: string
                  minLength: 5
                  maxLength: 100

            ImportTest:
              type: object
              required:
                - testTitle
                - fileKey
              properties:
                testTitle:
                  type: string
                  minLength: 5
                  maxLength: 80
                fileKey:
                  type: string
                  format: uuid
            CandidateTest:
              allOf:
                - $ref: '#/components/schemas/Test'
                - type: object
                  required:
                    - candidateId
                    - testId
                  properties:
                    candidateId:
                      type: string
                      format: uuid
                    testId:
                      type: string
                      format: uuid
                    solved:
                      type: boolean
                      nullable: true

            Test:
              type: object
              required:
                - title
                - lang
                - questions
              properties:
                id:
                  type: string
                  format: uuid
                parentId:
                  type: string
                  format: uuid
                  nullable: true
                targetLanguages:
                  nullable: true
                  type: array
                  items:
                    type: string
                    enum:
                      - en
                      - pl
                      - de
                      - fr
                      - jp
                      - ru
                      - cn
                title:
                  type: string
                  minLength: 1
                  maxLength: 100
                lang:
                  type: string
                  enum:
                    - en
                    - pl
                    - de
                    - fr
                    - jp
                    - ru
                    - cn
                questions:
                  type: array
                  items:
                    type: object
                    required:
                      - title
                      - type
                    properties:
                      title:
                        type: string
                        minLength: 1
                        maxLength: 100
                      description:
                        type: string
                        nullable: true
                        minLength: 1
                        maxLength: 500
                      code:
                        type: string
                        nullable: true
                        minLength: 1
                        maxLength: 500
                      type:
                        type: string
                        enum:
                          - W
                          - L
                          - O
                      correct:
                        type: boolean
                        nullable: true
                      answers:
                        nullable: true
                        type: array
                        items:
                          type: object
                          required:
                            - content
                          properties:
                            content:
                              type: string
                              minLength: 1
                              maxLength: 200
                            code:
                              type: string
                              nullable: true
                              minLength: 1
                              maxLength: 500
                            selected:
                              type: boolean
                              nullable: true


  TestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Tests
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  CandidatesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CandidateTests
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  GetTestsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies: AmazonDynamoDBFullAccess
      CodeUri: RecruitmentAPI
      Handler: recruitmentapi.endpoints.tests.GetTests::handleRequest
      Runtime: java8
      MemorySize: 512

  AddTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies: AmazonDynamoDBFullAccess
      CodeUri: RecruitmentAPI
      Handler: recruitmentapi.endpoints.tests.AddTest::handleRequest
      Runtime: java8
      MemorySize: 512

  ImportTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonS3FullAccess
      CodeUri: RecruitmentAPI
      Handler: recruitmentapi.endpoints.tests.ImportTest::handleRequest
      Runtime: java8
      MemorySize: 512

  UpdateTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies: AmazonDynamoDBFullAccess
      CodeUri: RecruitmentAPI
      Handler: recruitmentapi.endpoints.tests.UpdateTest::handleRequest
      Runtime: java8
      MemorySize: 512

  DeleteTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies: AmazonDynamoDBFullAccess
      CodeUri: RecruitmentAPI
      Handler: recruitmentapi.endpoints.tests.DeleteTest::handleRequest
      Runtime: java8
      MemorySize: 512

  GetTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies: AmazonDynamoDBFullAccess
      CodeUri: RecruitmentAPI
      Handler: recruitmentapi.endpoints.tests.GetTest::handleRequest
      Runtime: java8
      MemorySize: 512

  GetCandidatesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
      - Statement:
          - Sid: AllowCognito
            Effect: "Allow"
            Action: [
              "cognito-idp:*"
            ]
            Resource: '*'
      CodeUri: RecruitmentAPI
      Handler: recruitmentapi.endpoints.candidates.GetCandidates::handleRequest
      Runtime: java8
      MemorySize: 512

  GetCandidateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - Statement:
            - Sid: AllowCognito
              Effect: "Allow"
              Action: [
                "cognito-idp:*"
              ]
              Resource: '*'
      CodeUri: RecruitmentAPI
      Handler: recruitmentapi.endpoints.candidates.GetCandidate::handleRequest
      Runtime: java8
      MemorySize: 512

  DeleteCandidateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - Statement:
            - Sid: AllowCognito
              Effect: "Allow"
              Action: [
                "cognito-idp:*"
              ]
              Resource: '*'
      CodeUri: RecruitmentAPI
      Handler: recruitmentapi.endpoints.candidates.DeleteCandidate::handleRequest
      Runtime: java8
      MemorySize: 512

  AddCandidateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - Statement:
            - Sid: AllowCognito
              Effect: "Allow"
              Action: [
                "cognito-idp:*"
              ]
              Resource: '*'
      CodeUri: RecruitmentAPI
      Handler: recruitmentapi.endpoints.candidates.AddCandidate::handleRequest
      Runtime: java8
      MemorySize: 512

  GetAllCandidateTestsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - AmazonDynamoDBFullAccess
      CodeUri: RecruitmentAPI
      Handler: recruitmentapi.endpoints.candidatetests.GetAllCandidateTests::handleRequest
      Runtime: java8
      MemorySize: 512

  GetCandidateTestsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - AmazonDynamoDBFullAccess
      CodeUri: RecruitmentAPI
      Handler: recruitmentapi.endpoints.candidates.tests.GetCandidateTests::handleRequest
      Runtime: java8
      MemorySize: 512

  AddAdminCandidateTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies: AmazonDynamoDBFullAccess
      CodeUri: RecruitmentAPI
      Handler: recruitmentapi.endpoints.candidatetests.AddCandidateTest::handleRequest
      Runtime: java8
      MemorySize: 512

  UpdateCandidateTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies: AmazonDynamoDBFullAccess
      CodeUri: RecruitmentAPI
      Handler: recruitmentapi.endpoints.candidatetests.UpdateCandidateTest::handleRequest
      Runtime: java8
      MemorySize: 512

  DeleteCandidateTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies: AmazonDynamoDBFullAccess
      CodeUri: RecruitmentAPI
      Handler: recruitmentapi.endpoints.candidatetests.DeleteCandidateTest::handleRequest
      Runtime: java8
      MemorySize: 512

  GetAdminCandidateTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies: AmazonDynamoDBFullAccess
      CodeUri: RecruitmentAPI
      Handler: recruitmentapi.endpoints.candidatetests.GetCandidateTest::handleRequest
      Runtime: java8
      MemorySize: 512

  GeneratePresignedURLFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies: AmazonS3FullAccess
      CodeUri: RecruitmentAPI
      Handler: recruitmentapi.endpoints.GeneratePresignedURL::handleRequest
      Runtime: java8
      MemorySize: 512

Outputs:
  Api:
    Description: "API Gateway endpoint URL for KWAK"
    Value: !Sub "https://${KwakApi}.execute-api.${AWS::Region}.amazonaws.com/dev/"
